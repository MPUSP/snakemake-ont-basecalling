# ----------------------------------------------------- #
# A Snakemake workflow for nanopore basecalling         #
# and multiplexing using dorado.                        #
#                                                       #
# Authors: Rina Ahmed-Begrich                           #
# License: MIT                                          #
# ----------------------------------------------------- #

import os
import glob
import pandas as pd
import itertools
from snakemake.utils import validate
from snakemake.utils import min_version

__author__ = "Dr. Rina Ahmed-Begrich"

bold = "\033[1m"
green = "\033[92m"
cyan = "\033[36m"
end = "\033[0m"

msg = f"""{cyan}\nONT-basecalling: A Snakemake workflow
for nanopore basecalling and demultiplexing using dorado.{end}"""

epilog = f"""
{cyan}Written by {__author__}.
Max Planck Unit for the Science of Pathogens. Copyright (c) 2025.{end}

"""
# -----------------------------------------------------
# check minimum snakemake version
# -----------------------------------------------------
min_version("8.24.1")


# -----------------------------------------------------
# load configuration
# -----------------------------------------------------
configfile: "config/config.yml"


LOG = config["output"]["logs"]
OUTPUT = config["output"]["results"]


# -----------------------------------------------------
# load rules
# -----------------------------------------------------
include: "rules/common.smk"
include: "rules/basecall.smk"


# create dictornary with input files
INPUT_FILE_DIC = {
    r: glob.glob(os.path.join(runs.loc[r, "data_folder"], "*")) for r in runs.index
}
INPUT_FILE_NAME = {
    r: [
        os.path.basename(f)
        for f in glob.glob(os.path.join(runs.loc[r, "data_folder"], "*"))
    ]
    for r in runs.index
}
INPUT_FILE_NAME_NO_EXT = {
    r: [os.path.splitext(f)[0] for f in INPUT_FILE_NAME[r]] for r in runs.index
}

# check if pod5 files exist
for k in INPUT_FILE_DIC.keys():
    if len(INPUT_FILE_DIC[k]) == 0:
        raise ValueError(f"No pod5 file found for run {k}")


# -----------------------------------------------------
# optional messages, log and error handling
# -----------------------------------------------------
onstart:
    print("\n--- Dorado bascalling workflow started ---\n")
    print(f"Current working directory: {os.getcwd()}")
    print(f"Output directory: {OUTPUT}")
    print()


onsuccess:
    print()
    print(msg)
    print(epilog)
    print("--- Workflow finished! ---")
    print()


onerror:
    print()
    print(msg)
    print(epilog)
    print("--- An error occurred! ---")
    print()
    print(f"Check log files for more information: {LOG}")


# -----------------------------------------------------
# target rules
# -----------------------------------------------------
rule all:
    input:
        expand(
            os.path.join(LOG, "{run}", "flags", "dorado_demux.finished"),
            run=runs.index,
        ),
        expand(
            os.path.join(OUTPUT, "{run}", "dorado_summary", "all_summary.txt"),
            run=runs.index,
        ),
    default_target: True
